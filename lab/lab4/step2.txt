import base64
import boto3
import logging
import os
from cryptography.fernet import Fernet
from botocore.exceptions import IOError

def create_data_key(cmk_id, key_spec='AES_256'):
    # Create data key
    kms_client = boto3.client('kms')
    response = kms_client.generate_data_key(KeyId=cmk_id, KeySpec=key_spec)
    print(response['CiphertextBlob'])
    print(base64.b64encode(response['Plaintext']))
    # Return the encrypted and plaintext data key
    return response['CiphertextBlob'], base64.b64encode(response['Plaintext'])

def encrypt_file(filename, cmk_id):
    # Read the entire file into memory
    try:
        with open(filename, 'rb') as file:
            file_contents = file.read()
    except IOError as e:
        logging.error(e)
        return False

    data_key_encrypted, data_key_plaintext = create_data_key(cmk_id)
    if data_key_encrypted is None:
        return False
    logging.info('Created new AWS KMS data key')

    # Encrypt the file
    f = Fernet(data_key_plaintext)
    file_contents_encrypted = f.encrypt(file_contents)

    try:
        with open(filename + '.encrypted', 'wb') as file_encrypted:
            file_encrypted.write(len(data_key_encrypted).to_bytes(NUM_BYTES_FOR_LEN,
                                                                  byteorder='big'))
            file_encrypted.write(data_key_encrypted)
            file_encrypted.write(file_contents_encrypted)
    except IOError as e:
        logging.error(e)
        return False
    return True

def decrypt_data_key(data_key_encrypted):
    kms_client = boto3.client('kms')
    try:
        response = kms_client.decrypt(CiphertextBlob=data_key_encrypted)
    except ClientError as e:
        logging.error(e)
        return None
    return base64.b64encode((response['Plaintext']))

def decrypt_file(filename):
    # Read the encrypted file into memory
    try:
        with open(filename, 'rb') as file:
            file_contents = file.read()
    except IOError as e:
        logging.error(e)
        return False

    data_key_encrypted_len = int.from_bytes(file_contents[:NUM_BYTES_FOR_LEN],
                                            byteorder='big') \
                             + NUM_BYTES_FOR_LEN
    data_key_encrypted = file_contents[NUM_BYTES_FOR_LEN:data_key_encrypted_len]

    # Decrypt the data key before using it
    data_key_plaintext = decrypt_data_key(data_key_encrypted)
    if data_key_plaintext is None:
        return False

    # Decrypt the rest of the file
    f = Fernet(data_key_plaintext)
    file_contents_decrypted = f.decrypt(file_contents[data_key_encrypted_len:])

    # Write the decrypted file contents
    try:
        with open(filename + '.decrypted', 'wb') as file_decrypted:
            file_decrypted.write(file_contents_decrypted)
    except IOError as e:
        logging.error(e)
        return False
    return True


encrypt_file('kms/kms.txt', '31c3af87-25d8-4798-b543-b014cc29018f')
s3 = boto3.client('s3')
s3.upload_file('kms/kms.txt.encrypted', '22994257-cloudstorage', './kms.txt.encrypted')
s3.download_file('22994257-cloudstorage', './kms.txt.encrypted', '/home/mjieli/lab4/kms.txt.encrypted')
decrypt_file('kms.txt.encrypted')
